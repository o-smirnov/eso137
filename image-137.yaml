_include:
  - oms-cabs.yml

# extra wsclean opts, will go into
cabs:
  wsclean:
    image: ''
    command: wsclean
    inputs:
      multiscale-scales: 
        dtype: List[int]
        policies:
          repeat: ','
  wsclean_pol:
    image: ''
    command: wsclean
    inputs:
      multiscale-scales: 
        dtype: List[int]
        policies:
          repeat: ','
  flagman:
    command: casa --nogui --log2term -c 'flagmanager(vis="{current.ms}", mode="{current.mode}", versionname="{current.name}")'
    policies:
      skip: true
    inputs:
      ms: 
        dtype: MS
        required: true
        default: '{recipe.ms}'
      name:
        info: "flag version name"
        required: true
      mode: 
        choices: [save, restore]
        default: restore  
  cubical_gain_plots:
    virtual_env: 

# override default imaging settings from oms-cabs
lib:
  steps:
    wsclean:
      base:
        params:
          ms: '{recipe.ms}'
          prefix: '{recipe.image-prefix}'
          size: '{recipe.wsclean_size}'
          scale: '{recipe.pixel_scale}asec'
          nchan: '{recipe.wsclean_nchan}'
      image_ss:
        _use: lib.steps.wsclean.image
        params:
          column: SELFCAL{info.suffix}_DATA
          niter: 500000
          auto_mask: 7
          auto_threshold: 1
          baseline_averaging: 12
          no_update_model_required: true
      image_ms:
        _use: lib.steps.wsclean.image_ss
        params:
          # auto_mask: 10
          # auto_threshold: 5
          multiscale: true
          multiscale-scales: =recipe.multiscale-scales
      image_ms_pol:
        _use: lib.steps.wsclean.image_ms
        cab: wsclean_pol
        params:
          join_polarizations: true
          fit_spectral_pol: 
          pol: IQ

      image_deep:
        params:
          niter: 150000
          auto_threshold: 1
          nmiter: 10
          nchan: 24
          deconvolution_channels: 6
          fit_spectral_pol: 4
          join_polarizations: false
          baseline_averaging: 12
          no_update_model_required: true
    ddfacet:
      base:
        params:
          Data-MS: '{recipe.ms}'
          Output-Name: '{recipe.image-prefix}'
          Data-ColName: CORRECTED_DD_DATA
          Image-Cell: '{recipe.pixel_scale}'
      ssd2:
        params:
          Mask-Auto: false
    killms:
      base:
        params:
          InCol: CORRECTED_DD_DATA
    gocubical:
      base:
        cab: gocubical
        params:
          data/ms: '{recipe.ms}'
          data/time-chunk: 4
          data/freq-chunk: 0 
          dist/ncpu: 64
          model/list: MODEL_DATA
          out/dir: '{recipe.dir_out}/cc-{info.label}'
          out/column: SELFCAL{info.suffix}_DATA
          flags/auto-init: None
          flags/apply: FLAG
          flags/save: None
          flags/save-legacy: apply
          madmax/enable: true
          madmax/residuals: true
          madmax/threshold: 6
          madmax/global-threshold: 7
          log/verbose: solver=2

  recipes:
    mask_series:
      info: "Runs a series of masks at varying thresholds"
      for_loop:
        var: threshold
        over: [5,10,20,30,40,50]
      inputs:
        restored_image: 
          aliases: [mask.restored_image]
        image-prefix: 
          dtype: str
          required: true
      steps:
        mask:
          cab: breizorro
          params:
            threshold: =recipe.threshold
            mask: '{recipe.image-prefix}-mask{recipe.threshold}.fits'


## this augments the standard 'opts' config section to tweak logging settings
opts:
  log:
    dir: './{root.dir_out}/logs/log-{run.datetime}'
    name: log-{info.fqname}.txt
    nest: 2
    symlink: log

eso137:
  name: boom
  info: "selfcal on ESO137"

  assign:
    image-prefix: '{recipe.dir_out}/im{info.suffix}/im{info.suffix}{recipe.suffix}'
    log.dir: '{recipe.dir_out}/logs/log-{run.datetime}'
    init-model: init_model/im4-delay2-deep-eso117
    init-model-nchan: 8
    init-model-size: 6144
    init-model-scale: 1asec

  assign_based_on:
    obs:
      L1:
        ms: ../msdir/1557347448_sdp_l0-ESO137_001-corr.ms
        dir_out: obs1lb
        band: L
      L2:
        ms: ../msdir/1557433849_sdp_l0-ESO137_001-corr.ms
        dir_out: obs2lb
        band: L
    band:
      L:
        wsclean_size: 10000
        pixel_scale: 0.8
        wsclean_nchan: 8

  inputs:
    obs:
      default: L1
      choices: [L1, L2]
      info: "Selects observation, see labels above"
    suffix:
      dtype: str
      default: ''
    dir_out: 
      dtype: str
    ms:
      aliases: [(quartical).input_ms/path]
    multiscale-scales: 
      dtype: List[int]
      default: [0,6,12,18,24,36,48,72]

    
  steps:
    init_predict:
      _use: lib.steps.wsclean.predict
      skip: true
      params:
        ms: '{recipe.ms}'
        prefix: '{recipe.init-model}'
        nchan: '{recipe.init-model-nchan}'
        size: '{recipe.init-model-size}'
        scale: '{recipe.init-model-scale}'
  
    image-0:
      info: "auto-masked deep I clean, single scale"
      _use: lib.steps.wsclean.image_ss
      params:
        column: DATA

    image-0ms:
      info: "auto-masked deep I clean, multiscale"
      _use: lib.steps.wsclean.image_ms
      params:
        column: DATA

    mask-0:
      cab: breizorro
      params:
        restored_image: =previous.restored_mfs
        threshold: 5
        mask: '{recipe.image-prefix}-mask{current.threshold}.fits'

    predict-0:
      _use: lib.steps.wsclean.predict
      params:
        ms: '{recipe.ms}'
        prefix: '{steps.image-0.prefix}'
        nchan: '{steps.image-0.nchan}'
        
    restoreflags-0:
      cab: flagman
      tags: [never, cal1, cal1a]
      params:
        name: e137_flag__target_rfi_after
        mode: restore

    selfcal-1: 
        info: invokes quartical on a single MS
        _use: lib.steps.quartical.base
        params:
          input_model/recipe: MODEL_DATA
          output/columns: =LIST('SELFCAL{info.suffix}_DATA')

    selfcal-1a: 
      info: invokes cubical on a single MS
      tags: [never, cal1a]
      _use: lib.steps.gocubical.base
      params:
        out/mode: sc
        sol/jones: [K]
        sol/term-iters: 50
        sol/min-bl: 100
        k/type: f-slope
        k/time-int: 1
        k/freq-int: 0
        k/diag-only: true
        k/save-to: "{current.out/dir}.cc-out/Ksol"

    image-1:
      tags: [never, cal1]
      _use: lib.steps.wsclean.image_ss

    image-1a:
      tags: [never, cal1a]
      _use: lib.steps.wsclean.image_ss

    image-1ams:
      tags: [never]
      _use: lib.steps.wsclean.image_ms
      params:
        column: SELFCAL1a_DATA

    predict-1ams:
      _use: lib.steps.wsclean.predict
      tags: [never, cal2a]
      params:
        ms: '{recipe.ms}'
        prefix: '{steps.image-1ams.prefix}'
        nchan: '{steps.image-1ams.nchan}'

    selfcal-2a: 
      info: invokes cubical on a single MS
      tags: [never, cal2a]
      _use: lib.steps.gocubical.base
      params:
        out/mode: sr
        weight/column: WEIGHT
        sol/jones: [K]
        sol/term-iters: 50
        sol/min-bl: 100
        k/type: f-slope
        k/time-int: 1
        k/freq-int: 0
        k/diag-only: true
        k/save-to: "{current.out/dir}.cc-out/Ksol"

    image-2ams:
      tags: [never, cal2a]
      _use: lib.steps.wsclean.image_ms
      params:
        column: SELFCAL2a_DATA

    image-1ms:
      _use: lib.steps.wsclean.image_ms
      params:
        column: SELFCAL1_DATA

    # selfcal-1a: 
    #     info: invokes quartical on a single MS
    #     _use: lib.steps.quartical.base
    #     params:
    #       input_ms/select_uv_range: [200,0]
    #       input_model/recipe: MODEL_DATA
    #       output/columns: =LIST('SELFCAL{info.suffix}_DATA')

    # image-1a:
    #   info: "auto-masked deep I clean, single-scale"
    #   _use: lib.steps.wsclean.image
    #   params:
    #     column: SELFCAL{info.suffix}_DATA
    #     niter: 500000
    #     auto_mask: 7
    #     auto_threshold: 1
    #     baseline_averaging: 12
    #     no_update_model_required: true

    mask-1a:
      recipe:
        _use: lib.recipes.mask_series
      params:
        restored_image: =previous.restored_mfs
        image-prefix: =recipe.image-prefix

    image-2:
      info: "auto-masked deep I clean, multiscale"
      _use: lib.steps.wsclean.image
      params:
        column: SELFCAL1_DATA
        fits_mask: "{recipe.deep-mask-2}"
        niter: 300000
        auto_threshold: 1
        baseline_averaging: 12
        no_update_model_required: true

    image-2b:
      _use: lib.steps.wsclean.image
      info: "masked deep I-only clean. Also makes source list for subsequent DD predict"
#      skip: true
      params:
        column: SELFCAL_DATA
        niter: 250000
        threshold: 6e-6
        fits_mask: "{recipe.deep-mask-2}"
        baseline_averaging: 12
        save_source_list: true
        no_update_model_required: true

    predict-2:
      _use: lib.steps.wsclean.predict_pol
      params:
        ms: '{recipe.ms}'
        prefix: '{steps.image-2.prefix}'
        nchan: '{steps.image-2.nchan}'

#     dd_predict:
#       cab: crystalball
#       info: "Predicts off-axis source into separate column"
#       params:
#         ms: '{recipe.ms}'
#         within: dd.reg
#         output_column: DIR1_DATA
#         num_sources: 1000
#         sky_model: "{steps.image-2b.source_list}"

#     dd_selfcal-1:
#       # skip: true
#       cab: cubical
#       params:
#         ms: "{recipe.ms}"
#         parset: cc-parsets/solve-kde.parset
#         out_dir: '{recipe.dir_out}/solve-kde'
#         out_name: cc-kde
#         model_list: MODEL_DATA+-DIR1_DATA:DIR1_DATA
#         out_column: CORRECTED_DD_DATA
#         dist_ncpu: 9

#     image-3:
#       _use:
#         - lib.steps.wsclean.image_pol
#         - lib.steps.wsclean.image_deep
#       info: "makes full IQUV image"
#       params:
#         column: CORRECTED_DD_DATA
#         fits_mask: "{recipe.deep-mask-3}"

#     image-3b:
#       _use:
#         - lib.steps.wsclean.image_pol
#         - lib.steps.wsclean.image_deep
#       info: "makes full IQUV image but with dwarf not deconvolved out"
#       params:
#         column: CORRECTED_DD_DATA
#         fits_mask: "{recipe.deep-mask-notarget-3}"

#     image-3c:
#       skip: true
#       _use:
#         - lib.steps.wsclean.image_pol
#         - lib.steps.wsclean.image_deep
#       info: "makes full IQUV image but with dwarf not deconvolved out"
#       params:
#         column: CORRECTED_DD_DATA
#         fits_mask: '{steps.mask-3.except_dwarf}'
#         nchan: 8

#     predict-3:
#       _use: lib.steps.wsclean.predict_pol
#       params:
#         ms: '{recipe.ms}'
#         prefix: '{steps.image-3.prefix}'
#         nchan: '{steps.image-3.nchan}'

#     predict-3b:
#       _use: lib.steps.wsclean.predict_pol
#       params:
#         ms: '{recipe.ms}'
#         prefix: '{steps.image-3b.prefix}'
#         nchan: '{steps.image-3b.nchan}'

#     dd_selfcal-2:
#       cab: cubical
#       params:
#         ms: "{recipe.ms}"
#         parset: cc-parsets/solve-kde.parset
#         out_dir: '{recipe.dir_out}/solve-kde'
#         out_name: cc-kde
#         model_list: MODEL_DATA:DIR1_DATA
#         out_column: CORRECTED_DD_DATA
#         dist_ncpu: 9

#     image-4:
#       _use: 
#         - lib.steps.wsclean.image_pol
#         - lib.steps.wsclean.image_deep
#       info: "makes full IQUV image"
#       params:
#         column: CORRECTED_DD_DATA
#         fits_mask: '{steps.mask-3.mask}'

#     image-4b:
#       skip: true
#       _use:
#         - lib.steps.wsclean.image_pol
#         - lib.steps.wsclean.image_deep
#       info: "makes full IQUV image but with dwarf not deconvolved out"
#       params:
#         column: CORRECTED_DD_DATA
#         fits_mask: "{recipe.deep-mask-notarget-3}"
# #        fits_mask: '{steps.mask-3.except_dwarf}'
# #        niter: 300000
# #        auto_threshold: 1
# #        nmiter: 15
#         pol: IQ
#         baseline_averaging: 
#         no_update_model_required:
#         parallel_deconvolution:

#     predict-4:
#       _use: lib.steps.wsclean.predict_pol
#       skip: true
#       params:
#         ms: '{recipe.ms}'
#         prefix: '{steps.image-4.prefix}'
#         nchan: '{steps.image-4.nchan}'

#     ddimage-ddf0:
#       tags: [ddf,never]
#       info: "makes dirty image using DDF. Used to prime the makemodel step." 
#       _use: lib.steps.ddfacet.dirty

#     makemodel-ddf:
#       tags: [ddf,never]
#       info: "makes node catalog file based on DDF dirty image"
#       cab: ddf_makemodel
#       params:
#         ds9PreClusterFile: '{recipe.ddf-precluster-file}'
#         BaseImageName: '{steps.ddimage-ddf0.Output-Name}'

#     ddimage-ddf1:
#       tags: [ddf,never]
#       info: "initial deconvolution using DDF SSD2, without kMS solutions"
#       _use: lib.steps.ddfacet.ssd2
#       params:
#         Mask-External: '{recipe.deep-mask-ddf}'
#         Deconv-MaxMajorIter: 4
#         Facets-CatNodes: '{steps.makemodel-ddf.ClusterCat}'
#         Cache-Reset: true

#     killms:
#       tags: [ddf,never]
#       info: "run killMS using model from previous DDF deconvolution"
#       _use: lib.steps.killms.base
#       params:
#         MSName: '{recipe.ms}'
#         BaseImageName: '{steps.ddimage-ddf1.Output-Name}'

#     ddimage-ddf2a:
#       tags: [ddf,never]
#       info: "deconvolution using DDF SSD2, using kMS solutions"
#       _use: lib.steps.ddfacet.ssd2
#       params:
#         Mask-External: 'ddf/im3-mask-dwarf-10125.fits'
#         Deconv-MaxMajorIter: 4
#         Facets-CatNodes: '{steps.makemodel-ddf.ClusterCat}'
#         DDESolutions-DDSols: DD0
#         Predict-ColName: MODEL_DATA
#         Weight-ColName: [WEIGHT_SPECTRUM, IMAGING_WEIGHT]
#         Cache-Reset: true

#     subtract_model:
#       cab: taql_update
#       params: 
#         ms: "{recipe.ms}"
#         commands: 
#           - set 
#           - CORRECTED_DATA=CORRECTED_DD_DATA-MODEL_DATA

#     print-timeslots:
#       skip: true
#       cab: print_uniq_column_values
#       params:
#         ms: "{recipe.ms}"

#     source_catalog:
#       skip: true
#       cab: pybdsm
#       params:
#         image: '{steps.image-4.restored_mfs_i}'
#         thresh_pix: 4
#         thresh_isl: 3
#         rms_box: [100,20]
#         rms_map: false
#         flagging_opts: true
#         flag_maxsize_bm: 10
#         catalog_type: srl
#         catalog_format: ascii
#         outfile: '{current.image}.srl'

#     image-htc:
#       _use: lib.steps.wsclean.dirty
#       skip: true
#       params:
#         column: CORRECTED_DATA
#         intervals_out: '{recipe.htc_intervals}'
#         nchan: 1
#         size: '{recipe.htc_size}'
#         scale: '{recipe.htc_scale}'
#         prefix: '{recipe.dir_out}/im-htc-{recipe.htc_suffix}/im-htc-{recipe.htc_suffix}{recipe.suffix}'

#     image-htc-stack:
#       cab: stack_freq_cube
#       params:
#         images: '{previous.restored_timeint}'
#         cube: '{recipe.dir_out}/im-htc-{recipe.htc_suffix}/cube-{recipe.htc_suffix}{recipe.suffix}.fits'

#     extract_timestamps:
#       cab: extract_fits_timestamps
#       params:
#         images: '{previous.images}'
#         outfile: '{recipe.dir_out}/im-htc-{recipe.htc_suffix}/timestamps.p'

#     image-htc-filter:
#       cab: convolve_image
#       params:
#         image: '{steps.image-htc-stack.cube}'
#         size_arcsec: '{recipe.psf_size}'
#         outimage: '{current.image}.smooth.fits'

#     extract_light_curves:
#       cab: extract_light_curves
#       params:
#         cube: '{steps.image-htc-filter.outimage}'
#         outdir: '{recipe.dir_out}/im-htc-{recipe.htc_suffix}/lc'
#         catalog: '{steps.source_catalog.outfile}'
#         timestamps: '{steps.extract_timestamps.outfile}'
#         regfile: '{recipe.dir_out}/im-htc-{recipe.htc_suffix}/lc.reg'
#         minsize_arcsec: 15
#         ra0: -57.594961deg
#         dec0: -20.446559deg
#         within_deg: 3
#         nsrc: 



#     # make cube
#     # smooth cube by beam
#     # convert catalog to annotations
#     # extract light curves




# image_series:
#   name: "image series"
#   info: "makes series of per-scan images"

#   for_loop:
#     var: scan
#     over: scan_list

#   assign:
#     scan-name: 's{recipe.scan:02d}'
#     image-prefix: '{recipe.dir_out}/im{info.suffix}/im{info.suffix}-{recipe.scan-name}'
#     log:
#       name: log-{recipe.scan-name}-{info.fqname}.txt

#   inputs:
#     scan_list:
#       dtype: List[int]
#       default: ${vars.all_scans}
#     dir_out: 
#       dtype: str
#       default: 'pol4'
#     ms:
#       dtype: MS
# #      default: '../msdir/1622491578_sdp_l0-J2009_2026-corr.ms'
#       default: "../msdir/1624216341_sdp_l0-J2009_2026-corr.ms"

#   steps:
#     image-scans:
#       _use: lib.steps.wsclean.dirty
#       params:
#         column: DATA
#         size: 2000
#         mgain: 1.0
#         # pol: IQUV

