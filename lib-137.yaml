_include:
  - omstimelation/oms-cabs.yml


# extra wsclean opts, must go into main stimela2 repo soon
cabs:
  wsclean:
    image: ''
    command: wsclean
    inputs:
      multiscale-scales: 
        dtype: List[int]
        policies:
          repeat: ','
      channel-range:
        dtype: List[int]
        policies:
          repeat: list
      deconvolution-channels:
        dtype: int
      temp-dir:
        dtype: str

  wsclean_pol:
    image: ''
    command: wsclean
    inputs:
      multiscale-scales: 
        dtype: List[int]
        policies:
          repeat: ','
      channel-range:
        dtype: List[int]
        policies:
          repeat: ' '
      deconvolution-channels:
        dtype: int

  cubical_gain_plots:
    _contingent: .command
    virtual_env: 

# override default imaging settings from oms-cabs
lib:
  steps:
    wsclean:
      base:
        params:
          channel-range: =IFSET(root.chan0, LIST(root.chan0, root.chan1), UNSET)
          temp-dir: =root.dirs.temp

      image:
        _use: lib.steps.wsclean.base
        params:
          multiscale: =IFSET(root.image.multiscale)
          multiscale-scales: =IFSET(root.image.multiscale-scales)
          threads: =root.ncpu
          nmiter: 10
          mgain: 0.9
          baseline-averaging: 12
          no-update-model-required: true
      image_pol:
        _use: lib.steps.wsclean.image
        cab: wsclean_pol
        params:
          join-polarizations: true
          fit-spectral-pol: 
          pol: IQ

    cubical:
      base:
        cab: cubical
        params:
          data.time-chunk: 4
          data.freq-chunk: 0 
          dist.ncpu: =root.ncpu
          model.list: MODEL_DATA
          sel.chan: "{root.chan0}:{root.chan1}" 
          out.dir: '{root.dir-out}.cc-{info.label}'
          out.column: SELFCAL{info.suffix}_DATA
          flags.auto-init: None
          flags.apply: FLAG
          flags.save: None
          flags.save-legacy: apply
          madmax.enable: true
          madmax.residuals: true
          madmax.threshold: 10
          madmax.global-threshold: 12
          # log.verbose: solver=2

  # library of parameter sets which are often reused
  params:
    imaging:
      base:
        prefix: 
          info: image filename prefix
        size:
          info: image size in pixels
          dtype: int
        scale:
          info: image pixel scale, in degrees or as 'Xasec' 
          dtype: Union[float, str]
        nchan: 
          info: number of imaging bands
          dtype: int
      clean:
        weight: 
          info: imaging weight
        niter: 
          info: max number of minor cycle iterations
          dtype: int
        fit-spectral-pol: 
          info: order of polynomial for spectral fit
          dtype: int
        fits-mask:
          info: clean mask image
          dtype: File
        auto-mask:
          info: auto-masking threshold
          dtype: float
        auto-threshold:
          info: auto-stopping threshold
          dtype: float
        deconvolution-channels: 
          info: number of deconvolution bands
          dtype: int

  recipes:
    mask_series:
      info: "Runs a series of masks at varying thresholds"
      for_loop:
        var: threshold
        over: [14,16,18,20,22,24]
      inputs:
        restored_image: 
          aliases: [mask.restored_image]
        dilate:
          aliases: [mask.dilate]
        image-prefix: 
          dtype: str
          required: true
      outputs:
        mask-prefix:
          dtype: str
          implicit: '{recipe.image-prefix}-mask'
      steps:
        mask:
          cab: breizorro
          params:
            threshold: =recipe.threshold
            mask: '{recipe.image-prefix}-mask{recipe.threshold}.fits'

    selfcal-cc-delay:
      info: runs a basic step of delay selfcal (predict-solve-image)

      inputs:
        label:
          dtype: str
          info: label of this selfcal step, e.g. "1", "1p", etc.
        ms: 
          aliases: [(flagman).ms, (flagsummary).ms, (wsclean).ms, (cubical).data.ms, (quartical).input_ms.path]
          info: MS name
        flags:
          restore: 
            aliases: [restoreflags.name]
            info: flagversion to restore to before starting. Set to none/empty to skip flag restore.
            default: =root.init-flags
            required: false
          save:
            aliases: [saveflags.name]
            info: flagversion to save to after calibration. Set to none/empty to skip flag save.
            default: 'selfcal_{current.label}'
            required: false
        predict:
          # pull in standard image parameters
          _use: lib.params.imaging.base
          _scrub: '*.dtype'
          enable:
            info: enables the predict step
            dtype: bool
            default: true
          # connect them parameters by same name ("$$") of predict step
          prefix: 
            aliases: [$$] 
          size:
            aliases: [$$] 
          scale:
            aliases: [$$] 
          nchan: 
            aliases: [$$] 
            default: =IFSET(recipe.image.upsample-model-channels, SELF, recipe.image.nchan)
        image:
          # pull in standard image parameters
          _use: 
            - lib.params.imaging.base
            - lib.params.imaging.clean
          # connect them parameters by same name ("$") of image step
          prefix: 
            default: '{root.dir-out}/im-{current.label}/im{current.label}'
            aliases: [$$]
          size:
            aliases: [$$]
          scale:
            aliases: [$$]
          nchan: 
            aliases: [$$]
          deconvolution-channels: 
            aliases: [$$]
          fit-spectral-pol: 
            aliases: [$$]
          weight: 
            aliases: [$$]
          niter: 
            aliases: [$$]
          fits-mask:
            aliases: [$$]
          auto-mask:
            aliases: [$$]
          auto-threshold:
            aliases: [$$]
          # upsample models in frequency to this number of channels
          upsample-model-channels:
            info: "if set, uses smops to smoothly upsample the resulting model image to this number of channels"
            dtype: int
        skip:
          predict:
            dtype: bool
            default: false
            info: skips the predict step if set
          calibrate:
            dtype: bool
            default: false
            info: skips the calibration step if set
          image:
            dtype: bool
            default: false
            info: skips the calibration step if set
      
      outputs:
        output-model-prefix:
          implicit: =IFSET(current.image.upsample-model-channels, 
                            steps.upsample.model-prefix,
                            current.image.prefix)
      
      steps:
        restoreflags:
          info: restores an original flag version before starting calibration
          cab: flagman
          params:
            mode: restore
          skip: =not IFSET(recipe.flags.restore)

        predict:
          _use: lib.steps.wsclean.predict
          skip: =recipe.skip.predict
            
        calibrate: 
          info: invokes cubical on a single MS
          _use: lib.steps.cubical.base
          params:
            out.column: 'SELFCAL{recipe.label}_DATA'
            out.dir: '{root.dir-out}/cal-{recipe.label}.cc-out'
            out.mode: sc
            sol.jones: [K]
            sol.term-iters: 50
            sol.min-bl: 100
            k.type: f-slope
            k.time-int: 1
            k.freq-int: 0
            k.diag-only: true
            k.max-prior-error: 0.3
            k.max-post-error: 0.3
            k.save-to: "{current.out.dir}/Ksol-{recipe.label}"
          skip: =recipe.skip.calibrate

        flagsummary:
          info: reports flagging statistics
          cab: flagsummary
          params:
            spw: =root.casa-spw
          skip: =recipe.skip.calibrate

        saveflags:
          info: saves flag version after calibration
          cab: flagman
          params:
            mode: save
          skip: =not IFSET(recipe.flags.save) or recipe.skip.calibrate

        image:
          _use: lib.steps.wsclean.image
          params:
            column: =steps.calibrate.out.column
          skip: =recipe.skip.image or not IFSET(recipe.image.prefix) 

        upsample:
          cab: smops
          params:
            ms: =recipe.ms
            ip: =recipe.image.prefix
            nthreads: =root.ncpu
            co: =IFSET(recipe.image.upsample-model-channels)
            od: "{recipe.image.prefix}-upsampled"
          skip: =not IFSET(recipe.image.upsample-model-channels) 


    selfcal-cc-phase:
      _use: lib.recipes.selfcal-cc-delay
      info: runs a basic step of phase selfcal (predict-solve-image)
      _scrub: steps.calibrate.*

      steps:
        calibrate: 
          info: invokes cubical on a single MS
          _use: lib.steps.cubical.base
          params:
            out.column: 'SELFCAL{recipe.label}_DATA'
            out.dir: '{root.dir-out}/cal-{recipe.label}.cc-out'
            out.mode: sc
            sol.jones: [G]
            sol.term-iters: 50
            sol.min-bl: 100
            g.type: phase-diag
            g.time-int: 1
            g.freq-int: 0
            g.save-to: "{current.out.dir}/Gsol-{recipe.label}"
